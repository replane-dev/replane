/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type {ColumnType} from 'kysely';

export type ConfigUserRole = 'editor' | 'owner' | 'viewer';

export type Generated<T> =
  T extends ColumnType<infer S, infer I, infer U>
    ? ColumnType<S, I | undefined, U>
    : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type ProjectUserRole = 'admin' | 'owner';

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Accounts {
  access_token: string | null;
  expires_at: Int8 | null;
  id: Generated<number>;
  id_token: string | null;
  provider: string;
  providerAccountId: string;
  refresh_token: string | null;
  scope: string | null;
  session_state: string | null;
  token_type: string | null;
  type: string;
  userId: number;
}

export interface ApiTokens {
  created_at: Timestamp;
  creator_id: number;
  description: string;
  id: string;
  name: string;
  project_id: string;
  token_hash: string;
}

export interface AuditMessages {
  config_id: string | null;
  created_at: Timestamp;
  id: string;
  payload: Json;
  project_id: string | null;
  user_id: number | null;
}

export interface ConfigProposals {
  approved_at: Timestamp | null;
  base_config_version: number;
  config_id: string;
  created_at: Timestamp;
  id: string;
  proposed_delete: Generated<boolean>;
  proposed_description: string | null;
  proposed_schema: Json | null;
  proposed_value: Json | null;
  proposer_id: number | null;
  rejected_at: Timestamp | null;
  rejected_in_favor_of_proposal_id: string | null;
  reviewer_id: number | null;
}

export interface Configs {
  created_at: Timestamp;
  creator_id: number;
  description: string;
  id: string;
  name: string;
  project_id: string;
  schema: Json | null;
  updated_at: Timestamp;
  value: Json;
  version: number;
}

export interface ConfigUsers {
  config_id: string;
  created_at: Timestamp;
  role: ConfigUserRole;
  updated_at: Timestamp;
  user_email_normalized: string;
}

export interface ConfigVersions {
  author_id: number | null;
  config_id: string;
  created_at: Timestamp;
  description: string;
  id: string;
  name: string;
  proposal_id: string | null;
  schema: Json | null;
  value: Json;
  version: number;
}

export interface Migrations {
  id: number;
  runat: Timestamp;
  sql: string;
}

export interface Projects {
  created_at: Timestamp;
  description: string;
  id: string;
  is_example: Generated<boolean>;
  name: string;
  updated_at: Timestamp;
}

export interface ProjectUsers {
  created_at: Timestamp;
  project_id: string;
  role: ProjectUserRole;
  updated_at: Timestamp;
  user_email_normalized: string;
}

export interface Sessions {
  expires: Timestamp;
  id: Generated<number>;
  sessionToken: string;
  userId: number;
}

export interface Users {
  email: string | null;
  emailVerified: Timestamp | null;
  id: Generated<number>;
  image: string | null;
  name: string | null;
}

export interface VerificationToken {
  expires: Timestamp;
  identifier: string;
  token: string;
}

export interface DB {
  accounts: Accounts;
  api_tokens: ApiTokens;
  audit_messages: AuditMessages;
  config_proposals: ConfigProposals;
  config_users: ConfigUsers;
  config_versions: ConfigVersions;
  configs: Configs;
  migrations: Migrations;
  project_users: ProjectUsers;
  projects: Projects;
  sessions: Sessions;
  users: Users;
  verification_token: VerificationToken;
}
